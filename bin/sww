#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('auth-node:server');
const https = require('https');
const fs = require('fs');
const config = require('../config.local');
const app = require('../app');

const privateKey = fs.readFileSync(config.ssl.pk, 'utf8');
const certificate = fs.readFileSync(config.ssl.cert, 'utf8');

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
const port = normalizePort(process.env.PORT || config.httpPort);
const sport = normalizePort(process.env.PORT || config.httpsPort);

/**
 * Create HTTP server.
 */
const httpsServer = https.createServer({ key: privateKey, cert: certificate }, app);

const sserver = httpsServer.listen(sport, () => {
  console.log('Express api server is up and running at the port', sport);
});

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? `Pipe ${port}`
    : `Port ${port}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  const addr = httpServer.address();
  const bind = typeof addr === 'string'
    ? `pipe ${addr}`
    : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Event listener for HTTPS server "listening" event.
 */
function onHttpsListening() {
  const addr = httpsServer.address();
  const bind = typeof addr === 'string'
      ? `pipe ${addr}`
      : `port ${addr.port}`;
  debug(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */
httpsServer.on('error', onError);
httpsServer.on('listening', onHttpsListening);

module.exports = sserver;
